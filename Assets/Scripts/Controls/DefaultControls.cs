//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Scripts/Controls/DefaultControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultControls"",
    ""maps"": [
        {
            ""name"": ""Platform"",
            ""id"": ""d12cbe7f-02f8-4665-b6e8-306b46380ec0"",
            ""actions"": [
                {
                    ""name"": ""SpaceBar"",
                    ""type"": ""Button"",
                    ""id"": ""3eb671ce-9ebd-4186-a3db-2c9cbe551ac5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""ea863fe9-f5ff-411c-a287-7e29a77397ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""77c71367-224c-4d7d-9394-44fcabc9bc56"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74b44fa5-0202-45c2-9e0c-ca726dc9a021"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpaceBar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c17852ee-8c67-4f9b-8faf-b5dd2f011119"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c54a8bed-47b9-4624-a510-17fe7f557ff6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""59a0fd9f-8366-43dc-b024-1bfaaa0f3336"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""abef64b4-31c4-4a96-8985-05d13a39b4b6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4cd3d79a-d0d0-451c-be4d-dda4db34b0c1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a14696bc-daa4-4c11-b9d7-54351be75b7d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Platform
        m_Platform = asset.FindActionMap("Platform", throwIfNotFound: true);
        m_Platform_SpaceBar = m_Platform.FindAction("SpaceBar", throwIfNotFound: true);
        m_Platform_Pause = m_Platform.FindAction("Pause", throwIfNotFound: true);
        m_Platform_WASD = m_Platform.FindAction("WASD", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Platform
    private readonly InputActionMap m_Platform;
    private IPlatformActions m_PlatformActionsCallbackInterface;
    private readonly InputAction m_Platform_SpaceBar;
    private readonly InputAction m_Platform_Pause;
    private readonly InputAction m_Platform_WASD;
    public struct PlatformActions
    {
        private @DefaultControls m_Wrapper;
        public PlatformActions(@DefaultControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpaceBar => m_Wrapper.m_Platform_SpaceBar;
        public InputAction @Pause => m_Wrapper.m_Platform_Pause;
        public InputAction @WASD => m_Wrapper.m_Platform_WASD;
        public InputActionMap Get() { return m_Wrapper.m_Platform; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlatformActions set) { return set.Get(); }
        public void SetCallbacks(IPlatformActions instance)
        {
            if (m_Wrapper.m_PlatformActionsCallbackInterface != null)
            {
                @SpaceBar.started -= m_Wrapper.m_PlatformActionsCallbackInterface.OnSpaceBar;
                @SpaceBar.performed -= m_Wrapper.m_PlatformActionsCallbackInterface.OnSpaceBar;
                @SpaceBar.canceled -= m_Wrapper.m_PlatformActionsCallbackInterface.OnSpaceBar;
                @Pause.started -= m_Wrapper.m_PlatformActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlatformActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlatformActionsCallbackInterface.OnPause;
                @WASD.started -= m_Wrapper.m_PlatformActionsCallbackInterface.OnWASD;
                @WASD.performed -= m_Wrapper.m_PlatformActionsCallbackInterface.OnWASD;
                @WASD.canceled -= m_Wrapper.m_PlatformActionsCallbackInterface.OnWASD;
            }
            m_Wrapper.m_PlatformActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SpaceBar.started += instance.OnSpaceBar;
                @SpaceBar.performed += instance.OnSpaceBar;
                @SpaceBar.canceled += instance.OnSpaceBar;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @WASD.started += instance.OnWASD;
                @WASD.performed += instance.OnWASD;
                @WASD.canceled += instance.OnWASD;
            }
        }
    }
    public PlatformActions @Platform => new PlatformActions(this);
    public interface IPlatformActions
    {
        void OnSpaceBar(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnWASD(InputAction.CallbackContext context);
    }
}
